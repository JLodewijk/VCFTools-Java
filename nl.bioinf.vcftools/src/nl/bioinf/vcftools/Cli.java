/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nl.bioinf.vcftools;

import java.io.File;
import java.io.FileNotFoundException;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.BasicParser;
import org.apache.commons.cli.ParseException;
//import nl.bioinf.vcftools.Settings;
import org.apache.commons.cli.HelpFormatter;

/**
 *
 * @author aponnudurai <as.ponnudurai@st.hanze.nl>
 */
public class Cli {

    private Settings settings;
    private HelpFormatter helpFormatter;
    private Options option;
    private CommandLine cmd;
    private String[] args;

    /**
     * Constructor processing options and arguments.
     *
     * @param args arguments given on the commandline
     */
    Cli(String[] args) throws ParseException, Exception {

        this.args = args;
        this.option = defineOptions();
        this.helpFormatter = new HelpFormatter();
        this.settings = new Settings();

        try {
            CommandLineParser parser = new BasicParser();
            this.cmd = parser.parse(this.option, args);
        } catch (ParseException e) {
            System.err.println(e.getLocalizedMessage());
            System.exit(1);
        }

        // checking if options are valid
        checkOptions();

        // setting al the options 
        procesOptions();

    }

    /**
     * Function to define options which can be given by the user
     *
     * @return opt
     */
    public Options defineOptions() {
        Options opt = new Options();
        opt.addOption("h", "help", false, "Help function");

//        Basic Settings 
        opt.addOption("vcf", true, "This option defines the VCF file to be processed");
        opt.addOption("gvcf", true, "This option defines the compressed VCF file to be processed");
        opt.addOption("bcf", true, "This option defines the BCF file to be processed");
        opt.addOption("out", true, "This option defines the output filename prefix for all files generated by vcftools");

//         Site Filters 
        opt.addOption("chr", true, "Chromosome identifiers can be used more than once to include multiple chromosomes. Separate the identifiers with ',' if multiple identifiers are given");
        opt.addOption("notChr", true, "Chromosome identifiers can be used more than once to exlude multiple chromosomes. Separate the identifiers with ',' if multiple identifiers are given");
        opt.addOption("fromBp", true, "This option defines the physical start position of the site which will be processed. A integer is expected. This option must be used in right after -chr");
        opt.addOption("toBp", true, "This option defines the physical stop position of the site which will be processed. A integer is expected. This option must be used in right after -fromBp");
        opt.addOption("snp", true, "This option defines a snp which will be processed");
        opt.addOption("snpFile", true, "Include a list of SNPs given in a file, with one ID per line");
        opt.addOption("excludeSnp", true, "Exclude SNPs which are given by the user. Separate the snps with a ',' if mulitple snp are given");
        opt.addOption("excludeSnpFile", true, "Exclude a list of SNPs given in a file. The file should contain a list of SNP IDs, with one ID per line");
        opt.addOption("positions", true, "Include a set of sites. Separate with ',' if multiple sites are wanted to be given");
        opt.addOption("positionsFile", true, "Include a set of sites on the basis of a list of positions in a file");
        opt.addOption("excludePositions", true, "Exclude a set of sites. Separate with ',' if multiple sites are wanted to be given");
        opt.addOption("excludePositionsFile", true, "Exclude a set of sites on the basis of a list of positions in a file");
        opt.addOption("keepOnlyIndels", true, "include sites that contain an indel");
        opt.addOption("removeIndels", true, "Exclude sites that contain an indel");
        opt.addOption("bed", true, "Include a set of sites on the basis of a BED file");
        opt.addOption("exludeBed", true, "Exclude a set of sites on the basis of a BED files");
        opt.addOption("removeFilteredAll", false, "This option removes all sites with a FILTER flag");
        opt.addOption("removeFiltered", true, "Exclude sites with a specific filter flag");
        opt.addOption("keepFiltered", true, "This option can be used to select sites on the basis of specific filter flags"); //check required if arg = FLAG and no INFO field value
        opt.addOption("removeInfo", true, "This option can be used to exclude sites with a specific INFO flag");
        opt.addOption("keepInfo", true, "This option can be used to select sites on the basis of specific INFO flags, keepInfo is applied before removeInfo if both are given");
        opt.addOption("minQ", true, "Include only sites with Quality above this threshold. A double is expected");
        opt.addOption("minMeanDp", true, "Include sites with mean Depth which is higher than higher the given value. A double is expected");
        opt.addOption("maxMeanDp", true, "Include sites with mean Depth which is lower than the given value. A double is expected");
        opt.addOption("maf", true, "Include only sites with Minor Allele Frequency which is higher than the given value. A double is expected");
        opt.addOption("maxMaf", true, "Inlude only sites with Minor Allele Frequency which is lower than the given value. A double is expected");
        opt.addOption("nonRefAf", true, "Include only sites with all Non-Reference Allele Frequencies which is higher than the given value. A double is expected");
        opt.addOption("maxNonRefAf", true, "Include only sites with all Non-Reference Allele Frequencies which is lower than the given value. A double is expected");
        opt.addOption("mac", true, "Include only sites with Minor Allele Count which is higher than the given value. A double is expected");
        opt.addOption("maxMac", true, "Include only sites with Minor Allele Count which is lower than the given value. A double is expected");
        opt.addOption("nonRefAc", true, "Include only sites with all Non-Reference Allele Counts which is higher than the given value. A double is expected");
        opt.addOption("maxNonRefAc", true, "Include only sites with all Non-Reference Allele Counts which is lower than the given value. A double is expected");
        opt.addOption("hwe", true, "Sites with a p-value below the threshold defined by this option are taken to be out of the Hardy-Weinberg Equilibrium and therefore excluded. A double is expected");
        opt.addOption("geno", true, "Exclude sites on the basis of the proportion of missing data (defined to be between 0 and 1, where 1 indicates no missing data allowed). A double is expected");
        opt.addOption("maxMissingCount", true, "Exclude sites which has more than the given value for the number of missing chromosomes. An doubleouble is expected");
        opt.addOption("minAlleles", true, "Include only sites with a number of alleles which is higher than the given value. For example, to include only biallelic sites, one could use --minAlleles 2. A doubleouble is expected");
        opt.addOption("maxAlleles", true, "Include only sites with a number of alleles which is lower than the given value. For example, to include only biallelic sites, one could use --minAlleles 2. A doubleouble is expected");
        opt.addOption("thin", true, "Thin sites so that no two sites are within the specified distance. A double is expected");
        opt.addOption("mask", true, "Include sites on the basis of a MASK file");
        opt.addOption("invertMask", true, "This option can be used to specify a mask file that will be inverted before being applied");
        opt.addOption("maskMin", true, "Set the threshold value which determines if sites are filtered or not. A double is expected");

//        Individual filters 
        opt.addOption("keepIndv", true, "Specify an individual to be kept in the analysis. This option can accept multiple arguments to specify multiple individuals. Each individual should be seperated with a ','. A string is expected");
        opt.addOption("keepIndvFile", true, "Provide a file containing a list of individuals to include in subsequent analysis. Each individual ID (as defined in the VCF header line) should be included on a separate line");
        opt.addOption("removeIndv", true, "Specify an individual to be removed from the analysis. A string is expected. If --indv also used, --indv will be applied first.");
        opt.addOption("removeIndvFile", true, "Provide a file containing a list of individuals to exclude in subsequent analysis. Each individual ID (as defined in the VCF header line) should be included on a separate line if --keep also used, --keep will be applied first");
        opt.addOption("minIndvMeanDp", true, "Calculate the mean coverage on a per-individual basis. Only individuals with a coverage which is higher than the given value are included in subsequent analyses. A double is expected");
        opt.addOption("maxIndvMeanDp", true, "Calculate the mean coverage on a per-individual basis. Only individuals with a coverage which is lower the the given value are included in subsequent analyses. A double is expected");
        opt.addOption("mind", true, "Specify the minimum call rate threshold for each individual. A double is expected");
        opt.addOption("phased", false, "Only include phased data");
        opt.addOption("maxIndv", true, "Randomly thins individuals so that only the specified number are retained. A double is expected");

//         Genotype
        opt.addOption("removeFilteredGenoAll", false, "This option removes all genotypes based on a filter flag. Default filter flag is '.' or everything not equal to PASS");
        opt.addOption("removeFilteredGeno", true, "This option removes all genotypes based on a specific filter flag.");
        opt.addOption("minGq", true, "exclude all genotypes with a quality below the threshold specified by this option");
        opt.addOption("minDp", true, "exclude all genotypes with a sequencing depth which is higher than the given value");
        opt.addOption("maxDp", true, "exclude all genotypes with a sequencing depth which is lower than the given value");

//         Statistics 
        opt.addOption("count", false, "this option results a file with a raw count of allele per site of a given VCF file with the suffix .frq.count");
        opt.addOption("freq", false, "outputs the allel frequency in a file with the suffix .frq");
        opt.addOption("depth", false, "generates a file containing the mean depth per individual. This file has the suffix .idepth");

        return opt;
    }

    /**
     * Function to check if valid options are given
     */
    private void checkOptions() throws Exception {
        if (this.args.length < 1) {
            usage();
        }

        if (!this.cmd.hasOption("vcf")) {
            System.err.println("To run this program a VCF file is required");
            System.exit(1);
        }
        if (((this.cmd.hasOption("fromBp")) || (this.cmd.hasOption("toBp"))) && ((!this.cmd.hasOption("chr")) && (!this.cmd.hasOption("notChr")))) {
            System.err.println("The options -fromBp and -toBp can only be used in conjunction with -chr or -notChr");
            System.exit(1);
        }

        /*Check if fromBp is used with toBp and vice-verca and if fromBp and
         toBp is used with chr or notChr
         Only last missing fromBp or toBp gives ArrayOutOfBounceError   */
//        if (this.cmd.hasOption("fromBp") || this.cmd.hasOption("toBp")) {
//            if (this.cmd.getOptionValues("fromBp").length != this.cmd.getOptionValues("toBp").length) {
//                System.err.println("It is required to use the option -fromBp and -toBp together");
//                System.exit(1);
//            }
//        }
        if ((this.args[0].equals("-fromBp")) || (this.args[0].equals("-toBp")) || (this.args[1].equals("-fromBp")) || (this.args[1].equals("-toBp"))) {
            System.err.println("ERROR 1");
        }

        for (int i = 2; i < this.args.length; i++) {
            if (this.args[i].equals("-fromBp")) {

                if (((!this.args[i - 2].equals("-chr")) && (!this.args[i - 2].equals("-notChr"))) && (!this.args[i - 2].equals("-toBp"))) {
                    System.err.println("ERROR 2a");
                }
            }

            if (this.args[i].equals("-toBp")) {
                if (((!this.args[i - 2].equals("-chr")) && (!this.args[i - 2].equals("-notChr"))) && (!this.args[i - 2].equals("-fromBp"))) {
                    System.err.println("ERROR 2b");
                }
            }

        }

//                System.out.println(this.args[i]);
//                    if(this.args[i].equals("-fromBp")){
//                       
//                        if(i+4 == this.args.length){
//                            if(!this.args[i-2].equals("-chr") || !this.args[i-2].equals("-notChr")){
//                                System.err.println("error 1");
//                                System.exit(1);
//                            }
//                     }
//                        if(i+2 == this.args.length){
//                         if(!(this.args[i-2].equals("-chr")) && !(this.args[i-2].equals("-notChr"))){
//                                System.err.println("error 2");
//                                System.exit(1);
//                            }
//                        }
//                    if(this.args[i-2].equals("-toBp")){
//                        System.out.println(this.args[i+1]);
//                        if(!(this.args[i-4].equals("-chr"))){
//                                System.err.println("error 1b");
//                                System.exit(1);
//                            }
//                    }
//                    if(this.args[i+2].equals("-toBp")){
//                     if(!this.args[i-2].equals("-chr") || !this.args[i-2].equals("-notChr")){
//                                System.err.println("error 2b");
//                                System.exit(1);
//                            }
//                    }
//                        
//                        
//                        
//                    }
//                       
//                        if(this.args[i+2].equals("-toBp") || this.args[i-2].equals("-to")){
//                            if(Integer.parseInt(this.args[i+1]) > Integer.parseInt(this.args[i+3])){
//                                System.err.println("The value of -fromBp can not be higer than the value of -toBp ");
//                                System.exit(1);
//                            }
//                        if(!(this.args[i-2].equals("-notChr")) && !(this.args[i-2].equals("-chr"))){
//                            System.err.println("1 It is required to use -fromBp and -toBp in conjunction with -chr or -notChr");
//                            System.exit(1);
//                        } 
//                        }
//                        else if(this.args[i-2].equals("-toBp")){
//                            if(Integer.parseInt(this.args[i+1]) > Integer.parseInt(this.args[i-3])){
//                            System.err.println("The value of -fromBp can not be higer than the value of -toBp ");
//                            System.exit(1);
//                            }
//                            if(!(this.args[i-4].equals("-chr")) && !(this.args[i-4].equals("-notChr"))){
//                            System.err.println("2 It is required to use -fromBp and -toBp in conjunction with -chr or -notChr");
//                            System.exit(1);
//                           }
//                        } else{System.err.println("3 It is required to use -fromBp in conjunction with -toBp");
//                                System.exit(1);
//                        }
//                    }
//                   
//                   if(this.args[i].equals("-toBp")){
//                       if(this.args[i-2].equals("-fromBp")){
//                           if(Integer.parseInt(this.args[i+1]) < Integer.parseInt(this.args[i-1])){
//                                System.err.println("The value of -fromBp can not be higer than the value of -toBp ");
//                                System.exit(1);
//                           }
//                       if(!(this.args[i-4].equals("-chr")) && !(this.args[i-4].equals("-notChr"))){
//                           System.err.println("1b It is required to use -fromBp and -toBp in conjunction with -chr or -notChr");
//                           System.exit(1);
//                        } 
//                       } else if(this.args[i+2].equals("-fromBp")){
//                           if(Integer.parseInt(this.args[i+1]) < Integer.parseInt(this.args[i+3])){
//                               System.err.println("The value of -fromBp can not be higer than the value of -toBp ");
//                               System.exit(1);
//                           }
//                       if(!(this.args[i-2].equals("-chr")) && !(this.args[i-2].equals("-notChr"))){
//                           System.err.println("2b It is required to use -fromBp and -toBp in conjunction with -chr or -notChr");
//                           System.exit(1);
//                       }
//                       } else{System.err.println("3b It is required to use -fromBp in conjunction with -toBp");
//                                System.exit(1);
//                       }
//                     
//                   }
        if (this.cmd.hasOption("removeFilteredAll") && (this.cmd.hasOption("removeFiltered") || this.cmd.hasOption("keepFiltered"))) {
            System.err.println("When option -removeFilteredAll is given the options -removeFilterd or -keepFilterd are not allowed");
            System.exit(1);
        }
        if (cmd.hasOption("keepInfo") && cmd.hasOption("removeInfo")) {
            System.out.println("If the options -keepInfo and -removeInfo are given the -keepInfo option will be executed first");
        }
        if (cmd.hasOption("keepFiltered") && cmd.hasOption("removeFiltered")) {
            System.out.println("If the options -keepFiltered and -removeFiltered are given the -keepFiltered option will be executed first");
        }

        if (cmd.hasOption("minMeanDp") && !(cmd.hasOption("maxMeanDp")) || cmd.hasOption("maxMeanDp") && !(cmd.hasOption("minMeanDp"))) {
            System.err.println("It is required to use the options -minMeanDp and -maxMeanDp together");
            System.exit(1);
        }

        if (cmd.hasOption("minMeanDp") && cmd.hasOption("maxMeanDp")) {
            try {
                int minMeanDp = Integer.parseInt(this.cmd.getOptionValue("minMeanDp"));
                int maxMeanDp = Integer.parseInt(this.cmd.getOptionValue("maxMeanDp"));

                if (minMeanDp > maxMeanDp) {
                    System.err.println("The value of the option -minMeanDp can not be higher than the value of the option -MaxMeanDp");
                    System.exit(1);
                }
            } catch (NumberFormatException e) {
                System.err.println("The values of -minMeanDp and -maxMeanDp have to be numerical");
                System.exit(1);
            }
        }

        if (cmd.hasOption("maf") && !(cmd.hasOption("maxMaf")) || cmd.hasOption("maxMaf") && !(cmd.hasOption("maf"))) {
            System.err.println("It is required to use the options -maf and -maxMaf together");
            System.exit(1);
        }
        if (cmd.hasOption("maf") && cmd.hasOption("maxMaf")) {
            try {
                int maf = Integer.parseInt(this.cmd.getOptionValue("maf"));
                int maxMaf = Integer.parseInt(this.cmd.getOptionValue("maxMaf"));
                if (maf > maxMaf) {
                    System.err.println("The value of the option -maf can not be higher than the value of the option -maxMaf");
                    System.exit(1);
                }
            } catch (NumberFormatException e) {
                System.err.println("The value of the options -maf and -maxMaf have to be numerical");
                System.exit(1);
            }
        }

        if (cmd.hasOption("nonRefAf") && !(cmd.hasOption("maxNonRefAf")) || cmd.hasOption("maxNonRefAf") && !(cmd.hasOption("nonRefAf"))) {
            System.err.println("It is required to use the options -nonRefAf and -maxNonRefAf together");
            System.exit(1);
        }

        if (cmd.hasOption("nonRefAf") && cmd.hasOption("maxNonRefAf")) {
            try {
                int nonRefAf = Integer.parseInt(this.cmd.getOptionValue("nonRefAf"));
                int maxNonRefAf = Integer.parseInt(this.cmd.getOptionValue("maxNonRefAf"));
                if (nonRefAf > maxNonRefAf) {
                    System.err.println("The value of the option -nonRefAf can not be higher than the value of the option -maxNonRefAf");
                    System.exit(1);
                }
            } catch (NumberFormatException e) {
                System.err.println("The values of the options -nonRefAf and -maxNonRefAf have to be numerical");
                System.exit(1);
            }
        }

        if (cmd.hasOption("mac") && !(cmd.hasOption("maxMac")) || cmd.hasOption("maxMac") && !(cmd.hasOption("mac"))) {
            System.err.println("It is required to use the options -mac and -maxMac together");
            System.exit(1);
        }
        if (cmd.hasOption("mac") && cmd.hasOption("maxMac")) {
            try {
                int mac = Integer.parseInt(this.cmd.getOptionValue("mac"));
                int maxMac = Integer.parseInt(this.cmd.getOptionValue("maxMac"));
                if (mac > maxMac) {
                    System.err.println("The value of the option -mac can not be higher than the value of the option -maxMac");
                    System.exit(1);
                }
            } catch (NumberFormatException e) {
                System.err.println("The value of the options -mac and -maxMac have to be numerical");
                System.exit(1);
            }
        }
        if (cmd.hasOption("nonRefAc") && !(cmd.hasOption("maxNonRefAc")) || cmd.hasOption("maxNonRefAc") && !(cmd.hasOption("nonRefAc"))) {
            System.err.println("It is required to use the options -nonRefAc and -maxNonRefAc together");
            System.exit(1);
        }
        if (cmd.hasOption("nonRefAc") && cmd.hasOption("maxNonRefAc")) {
            try {
                int nonRefAc = Integer.parseInt(this.cmd.getOptionValue("nonRefAc"));
                int maxNonRefAc = Integer.parseInt(this.cmd.getOptionValue("maxNonRefAc"));
                if (nonRefAc > maxNonRefAc) {
                    System.err.println("The value of the option -nonRefAc can not be higher than the value of the option -maxNonRefAc");
                    System.exit(1);
                }
            } catch (NumberFormatException e) {
                System.err.println("The value of the options -nonRefAc and -maxNonRefAc have to be numerical");
                System.exit(1);
            }
        }

        if (cmd.hasOption("geno")) {
            String geno = cmd.getOptionValue("geno");

            if (!(geno.equals("1")) && !(geno.equals("0"))) {

                System.err.println("The option -geno only allows 1 or 0. Where 1 indicates no missing data allowed");
                System.exit(1);

            }
        }
        if (cmd.hasOption("minAlleles") && !(cmd.hasOption("maxAlleles")) || cmd.hasOption("maxAlleles") && !(cmd.hasOption("minAlleles"))) {
            System.err.println("It is required to use the options -minAlleles and -maxAlleles together");
            System.exit(1);
        }

        if (cmd.hasOption("minAlleles") && cmd.hasOption("maxAlleles")) {
            try {
                int minAlleles = Integer.parseInt(this.cmd.getOptionValue("minAlleles"));
                int maxAlleles = Integer.parseInt(this.cmd.getOptionValue("maxAlleles"));
                if (minAlleles > maxAlleles) {
                    System.err.println("The value of the option -minAlleles can not be higher than the value of the option -maxAlleles");
                    System.exit(1);
                }
            } catch (NumberFormatException e) {
                System.err.println("The value of the options -minAlleles and -maxAlleles have to be numerical");
                System.exit(1);
            }
        }

        if (this.cmd.hasOption("minIndvMeanDp") && !(this.cmd.hasOption("maxIndvMeanDp")) || this.cmd.hasOption("maxIndvMeanDp") && !(this.cmd.hasOption("minIndvMeanDp"))) {
            System.err.println("It is required to use the options -minIndvMeanDp and -maxIndvMeanDp together");
            System.exit(1);
        }

        if (cmd.hasOption("minIndvMeanDp") && cmd.hasOption("minIndvMeanDp")) {
            try {
                Double minIndvMeanDp = Double.parseDouble(this.cmd.getOptionValue("minIndvMeanDp"));
                Double maxIndvMeanDp = Double.parseDouble(this.cmd.getOptionValue("maxIndvMeanDp"));
                if (minIndvMeanDp > maxIndvMeanDp) {
                    System.err.println("The value of the option -minIndvMeanDp can not be higher than the value of the option -maxIndvMeanDp");
                    System.exit(1);
                }
            } catch (NumberFormatException e) {
                System.err.println("The values of the options minIndvMeanDp and maxIndvMeanDp have to be numerical");
                System.exit(1);
            }
        }
        if (this.cmd.hasOption("thin")) {
            try {
                int thinValue = Integer.parseInt(this.cmd.getOptionValue("thin"));
                if (thinValue < 1) {
                    System.err.println("The value for the option -thin can not be less than 1");
                    System.exit(1);
                }
            } catch (NumberFormatException e) {
                System.err.println("The value of the option thin has to be numerical");
                System.exit(1);
            }

        }

        if (this.cmd.hasOption("minDp") && !(this.cmd.hasOption("maxDp")) || this.cmd.hasOption("maxDp") && !(this.cmd.hasOption("minDp"))) {
            System.err.println("It is required to use the options -minDp and -maxDp together");
            System.exit(1);
        }

        if (cmd.hasOption("minDp") && cmd.hasOption("maxDp")) {
            try {
                int minDp = Integer.parseInt(this.cmd.getOptionValue("minDp"));
                int maxDp = Integer.parseInt(this.cmd.getOptionValue("maxDp"));
                if (minDp > maxDp) {
                    System.err.println("the value of the option -minDp can not be higher than the value of the option -maxDp");
                    System.exit(1);
                }
            } catch (NumberFormatException e) {
                System.err.println("The values op the options -minDp and -maxDp have to be numerical");
                System.exit(1);
            }
        }
        if (cmd.hasOption("vcf")) {
            File file = new File(cmd.getOptionValue("vcf"));
            if (!(file.exists())) {
                System.err.println("This path does not exist = " + cmd.getOptionValue("vcf"));
                System.exit(1);
            }
            if ((file.isDirectory())) {
                System.err.println("Given is a directory not a file = " + cmd.getOptionValue("vcf"));
                System.exit(0);
            }
            if (!(file.isFile())) {
                System.err.println("file " + cmd.getOptionValue("vcf") + " can not be opened");
                System.exit(1);
            }
        }
        if (cmd.hasOption("snpFile")) {
            File file = new File(cmd.getOptionValue("snpFile"));
            if (!(file.exists())) {
                System.err.println("This path does not exist = " + cmd.getOptionValue("snpFile"));
                System.exit(1);
            }
            if ((file.isDirectory())) {
                System.err.println("Given is a directory not a file = " + cmd.getOptionValue("snpFile"));
                System.exit(0);
            }
            if (!(file.isFile())) {
                System.err.println("file " + cmd.getOptionValue("snpFile") + " can not be opened");
                System.exit(1);
            }
        }

        if (cmd.hasOption("excludeSnpFile")) {
            File file = new File(cmd.getOptionValue("excludeSnpFile"));
            if (!(file.exists())) {
                System.err.println("This path does not exist = " + cmd.getOptionValue("excludeSnpFile"));
                System.exit(1);
            }
            if ((file.isDirectory())) {
                System.err.println("Given is a directory not a file = " + cmd.getOptionValue("excludeSnpFile"));
                System.exit(0);
            }
            if (!(file.isFile())) {
                System.err.println("file " + cmd.getOptionValue("excludeSnpFile") + " can not be opened");
                System.exit(1);
            }
        }
        if (cmd.hasOption("positionsFile")) {
            File file = new File(cmd.getOptionValue("positionsFile"));
            if (!(file.exists())) {
                System.err.println("This path does not exist = " + cmd.getOptionValue("positionsFile"));
                System.exit(1);
            }
            if ((file.isDirectory())) {
                System.err.println("Given is a directory not a file = " + cmd.getOptionValue("positionsFile"));
                System.exit(0);
            }
            if (!(file.isFile())) {
                System.err.println("file " + cmd.getOptionValue("positionsFile") + " can not be opened");
                System.exit(1);
            }
        }
        if (cmd.hasOption("excludePositionsFile")) {
            File file = new File(cmd.getOptionValue("excludePositionsFile"));
            if (!(file.exists())) {
                System.err.println("This path does not exist = " + cmd.getOptionValue("excludePositionsFile"));
                System.exit(1);
            }
            if ((file.isDirectory())) {
                System.err.println("Given is a directory not a file = " + cmd.getOptionValue("excludePositionsFile"));
                System.exit(0);
            }
            if (!(file.isFile())) {
                System.err.println("file " + cmd.getOptionValue("excludePositionsFile") + " can not be opened");
                System.exit(1);
            }

        }
        if (cmd.hasOption("mask")) {
            File file = new File(cmd.getOptionValue("mask"));
            if (!(file.exists())) {
                System.err.println("This path does not exist = " + cmd.getOptionValue("mask"));
                System.exit(1);
            }
            if ((file.isDirectory())) {
                System.err.println("Given is a directory not a file = " + cmd.getOptionValue("mask"));
                System.exit(0);
            }
            if (!(file.isFile())) {
                System.err.println("file " + cmd.getOptionValue("mask") + " can not be opened");
                System.exit(1);
            }
        }
        if (cmd.hasOption("keepIndvFile")) {
            File file = new File(cmd.getOptionValue("keepIndvFile"));
            if (!(file.exists())) {
                System.err.println("This path does not exist = " + cmd.getOptionValue("keepIndvFile"));
                System.exit(1);
            }
            if ((file.isDirectory())) {
                System.err.println("Given is a directory not a file = " + cmd.getOptionValue("keepIndvFile"));
                System.exit(0);
            }
            if (!(file.isFile())) {
                System.err.println("file " + cmd.getOptionValue("keepIndvFile") + " can not be opened");
                System.exit(1);
            }
        }
        if (cmd.hasOption("removeIndvFile")) {
            File file = new File(cmd.getOptionValue("removeIndvFile"));
            if (!(file.exists())) {
                System.err.println("This path does not exist = " + cmd.getOptionValue("removeIndvFile"));
                System.exit(1);
            }
            if ((file.isDirectory())) {
                System.err.println("Given is a directory not a file = " + cmd.getOptionValue("removeIndvFile"));
                System.exit(0);
            }
            if (!(file.isFile())) {
                System.err.println("file " + cmd.getOptionValue("removeIndvFile") + " can not be opened");
                System.exit(1);
            }
        }
    }

    /**
     * Set settings object
     *
     * @param settings
     */
    public void setSettings(Settings settings) {
        this.settings = settings;
    }

    /**
     * Get settings object
     *
     * @return settings
     */
    public Settings getSettings() {
        return settings;
    }

    /**
     * Usage, for when errors occur in program
     *
     */
    public void usage() {
        helpFormatter.printHelp("For optimal analysing of VCF files the folowing options can be used."
                + " This tool supports VCF files with higher version than 4.0. This tool is also"
                + " compatible for snp analysis in poliploid cells", this.option);

        System.exit(0);

    }

    /**
     * Function to set the Settings
     */
    private void procesOptions() {

        if (this.cmd.hasOption("h")) {
            usage();
        }
        if (this.cmd.hasOption("vcf")) {

            settings.setInputFile(this.cmd.getOptionValue("vcf"));
        }

        settings.setInputFile(this.cmd.getOptionValue("vcf"));

        if (this.cmd.hasOption("gvcf")) {
            settings.setGzipped(true);
        }
        if (this.cmd.hasOption("out")) {
//            settings.setOutputFile(cmd.getOptionValue("out"));
        }
        if (this.cmd.hasOption("chr")) {

            for (int pointer = 0; pointer < this.args.length; pointer++) {
//                System.out.println(this.args[pointer+1] +" "+pointer + " length args = " + this.args.length);

                if (this.args[pointer].equals("-chr")) {

                    int fromValuePointer = 0;
                    int toValueFactor = 0;
                    if (pointer + 2 == this.args.length) {
                        settings.addChr(this.args[pointer + 1]);
                        break;
                    } else if (pointer + 4 == this.args.length) {
                        settings.addChr(this.args[pointer + 1]);
                        break;
                    }

                    if (!this.args[pointer + 2].equals("-fromBp")
                            || !this.args[pointer + 2].equals("-chr")
                            || !this.args[pointer + 2].equals("-toBp")) {
                    } else {
                        settings.addChr(this.args[pointer + 1]);
                    }

                    if (args[pointer + 2].equals("-fromBp")) {
                        fromValuePointer = pointer + 2;
                    } else if (args[pointer + 4].equals("-fromBp")) {
                        fromValuePointer = pointer + 4;
                    }

                    if (args[pointer + 2].equals("-toBp")) {
                        toValueFactor = pointer + 2;
                    } else if (args[pointer + 4].equals("-toBp")) {
                        toValueFactor = pointer + 4;
                    }

                    if (this.args[fromValuePointer].equals("-fromBp") && this.args[toValueFactor].equals("-toBp")) {
                        int fromBp = Integer.parseInt(this.args[fromValuePointer + 1]);
                        int toBp = Integer.parseInt(this.args[toValueFactor + 1]);
                        settings.addChr(this.args[pointer + 1], fromBp, toBp);

                    } else {

                        settings.addChr(this.args[pointer + 1]);

                    }

                }
            }

        }
        if (this.cmd.hasOption("notChr")) {
            for (int pointer = 0; pointer < this.args.length; pointer++) {
                if (this.args[pointer].equals("-notChr")) {
                    int fromValuePointer = 0;
                    int toValueFactor = 0;
                    if (pointer + 2 == this.args.length) {
                        settings.addNotChr(this.args[pointer + 1]);
                        break;
                    } else if (pointer + 4 == this.args.length) {
                        settings.addNotChr(this.args[pointer + 1]);
                        break;
                    }

                    if (!this.args[pointer + 2].equals("-fromBp")
                            || !this.args[pointer + 2].equals("-notChr")
                            || !this.args[pointer + 2].equals("-toBp")) {
                    } else {
                        settings.addNotChr(this.args[pointer + 1]);
                    }
                    if (args[pointer + 2].equals("-fromBp")) {
                        fromValuePointer = pointer + 2;
                    } else if (args[pointer + 4].equals("-fromBp")) {
                        fromValuePointer = pointer + 4;
                    }
                    if (args[pointer + 2].equals("-toBp")) {
                        toValueFactor = pointer + 2;
                    } else if (args[pointer + 4].equals("-toBp")) {
                        toValueFactor = pointer + 4;
                    }
                    if (this.args[fromValuePointer].equals("-fromBp") && this.args[toValueFactor].equals("-toBp")) {
                        int fromBp = Integer.parseInt(this.args[fromValuePointer + 1]);
                        int toBp = Integer.parseInt(this.args[toValueFactor + 1]);
                        settings.addNotChr(this.args[pointer + 1], fromBp, toBp);

                    } else {

                        settings.addNotChr(this.args[pointer + 1]);
                    }
                }
            }
        }

        if (this.cmd.hasOption("snp")) {
            String snpIdentifiers = this.cmd.getOptionValue("snp");

            String[] splitedSnpIdentifiers = snpIdentifiers.split(",");
            for (String identifier : splitedSnpIdentifiers) {
                settings.addSnp(identifier);

            }
        }
        if (this.cmd.hasOption("snpFile")) {
            settings.loadSnpFile(this.cmd.getOptionValue("snpFile"));
        }
        if (this.cmd.hasOption("excludeSnp")) {
            String excludeSnpIdentifiers = this.cmd.getOptionValue("excludeSnp");

            String[] splitedExcludedIdentifiers = excludeSnpIdentifiers.split(",");
            for (String identifiers : splitedExcludedIdentifiers) {
                settings.addExcludeSnp(identifiers);
            }
        }
        if (this.cmd.hasOption("excludeSnpFile")) {
            settings.loadExcludeSnpFile(this.cmd.getOptionValue("excludeSnpFile"));
        }

        if (this.cmd.hasOption("positionsFile")) {
            settings.loadPositionsFile(this.cmd.getOptionValue("positionsFile"));
        }

        if (this.cmd.hasOption("excludePositionsFile")) {
            settings.loadExcludePositionsFile(this.cmd.getOptionValue("excludePositionsFile"));
        }
        if (this.cmd.hasOption("keepOnlyIndels")) {
            settings.setKeepIndels(true);
        }
        if (this.cmd.hasOption("removeIndels")) {
            settings.setKeepIndels(false);
        }
        if (this.cmd.hasOption("bed")) {
            settings.loadBedFile(this.cmd.getOptionValue("bed"));
        }
        if (this.cmd.hasOption("exludeBed")) {
            settings.loadExludeBedFile(this.cmd.getOptionValue("exludeBed"));
        }
        if (this.cmd.hasOption("removeFilteredAll")) {
            settings.setRemoveFilteredAll(true);
        }
        if (this.cmd.hasOption("removeFiltered")) {
            String removedFiltered = this.cmd.getOptionValue("removeFiltered");
            String[] splitedRemovedFiltered = removedFiltered.split(",");

            for (String removedItem : splitedRemovedFiltered) {
                settings.addRemoveFiltered(removedItem);
            }
            settings.setRemoveFiltered(settings.getRemoveFiltered());
        }
        if (this.cmd.hasOption("keepFiltered")) {
            String keepFiltered = this.cmd.getOptionValue("keepFiltered");
            String[] splitedKeepFiltered = keepFiltered.split(",");

            for (String keepFilteredItem : splitedKeepFiltered) {
                settings.addKeepFiltered(keepFilteredItem);
            }
            settings.setKeepFiltered(settings.getKeepFiltered());
        }
        if (this.cmd.hasOption("removeInfo")) {
            String removeInfo = this.cmd.getOptionValue("removeInfo");
            String[] splitedRemovedInfo = removeInfo.split(",");

            for (String removedInfoItem : splitedRemovedInfo) {
                settings.addRemoveInfo(removedInfoItem);
            }
        }
        if (this.cmd.hasOption("keepInfo")) {
            String keepInfo = this.cmd.getOptionValue("keepInfo");
            String[] splitedKeptInfo = keepInfo.split(",");

            for (String keptInfoItem : splitedKeptInfo) {
                settings.addKeepInfo(keepInfo);

            }
            settings.setKeepInfo(settings.getKeepInfo());
        }
        if (this.cmd.hasOption("minQ")) {
            Double minQValue = Double.parseDouble(this.cmd.getOptionValue("minQ"));
            settings.setMinQ(minQValue);
        }

        if (this.cmd.hasOption("minMeanDp")) {
            Double minMeanDp = Double.parseDouble(this.cmd.getOptionValue("minMeanDp"));
            settings.setMinMeanDp(minMeanDp);
        }
        if (this.cmd.hasOption("maxMeanDp")) {
            Double maxMeanDp = Double.parseDouble(this.cmd.getOptionValue("maxMeanDp"));
            settings.setMaxMeanDp(maxMeanDp);

        }
        if (this.cmd.hasOption("maf")) {
            Double maf = Double.parseDouble(this.cmd.getOptionValue("maf"));
            settings.setMaf(maf);
        }
        if (this.cmd.hasOption("maxMaf")) {
            Double maxMaf = Double.parseDouble(this.cmd.getOptionValue("maxMaf"));
            settings.setMaxMaf(maxMaf);
        }
        if (this.cmd.hasOption("nonRefAf")) {
            Double nonRefAf = Double.parseDouble(this.cmd.getOptionValue("nonRefAf"));
            settings.setNonRefAf(nonRefAf);
        }
        if (this.cmd.hasOption("maxNonRefAf")) {
            Double maxNonRefAf = Double.parseDouble(this.cmd.getOptionValue("maxNonRefAf"));
            settings.setMaxNonRefAf(maxNonRefAf);
        }
        if (this.cmd.hasOption("mac")) {
            int mac = Integer.parseInt(this.cmd.getOptionValue("mac"));
            settings.setMac(mac);
        }
        if (this.cmd.hasOption("maxMac")) {
            int maxMac = Integer.parseInt(this.cmd.getOptionValue("maxMac"));
            settings.setMaxMac(maxMac);
        }
        if (this.cmd.hasOption("nonRefAc")) {
            Double nonRefAc = Double.parseDouble(this.cmd.getOptionValue("nonRefAc"));
            settings.setNonRefAc(nonRefAc);
        }
        if (this.cmd.hasOption("maxNonRefAc")) {
            Double maxNonRefAc = Double.parseDouble(this.cmd.getOptionValue("maxNonRefAc"));
            settings.setMaxNonRefAc(maxNonRefAc);
        }
        if (this.cmd.hasOption("hwe")) {
            Double hwe = Double.parseDouble(this.cmd.getOptionValue("hwe"));
            settings.setHwe(hwe);
        }
        if (this.cmd.hasOption("geno")) {
            Double geno = Double.parseDouble(this.cmd.getOptionValue("geno"));
            settings.setGeno(geno);
        }
        if (this.cmd.hasOption("maxMissingCount")) {
            int maxMissingCount = Integer.parseInt(this.cmd.getOptionValue("maxMissingCount"));
//      settings.setMaxMissingCount(maxMissingCount);
        }
        if (this.cmd.hasOption("minAlleles")) {
            int minAlleles = Integer.parseInt(this.cmd.getOptionValue("minAlleles"));
            settings.setMinAlleles(minAlleles);
        }
        if (this.cmd.hasOption("maxAlleles")) {
            int maxAlleles = Integer.parseInt(this.cmd.getOptionValue("maxAlleles"));
            settings.setMaxAlleles(maxAlleles);
        }
        if (this.cmd.hasOption("thin")) {
            int thin = Integer.parseInt(this.cmd.getOptionValue("thin"));
            settings.setThin(thin);
        }
        if (this.cmd.hasOption("mask")) {
            settings.loadMaskFile(this.cmd.getOptionValue("mask"));
        }
        if (this.cmd.hasOption("invertMask")) {
            settings.loadInvertMaskFile(this.cmd.getOptionValue("invertMask"));
        }
        if (this.cmd.hasOption("maskMin")) {
            int maskMin = Integer.parseInt(this.cmd.getOptionValue("maskMin"));
            settings.setMaskMin(maskMin);
        }
        if (this.cmd.hasOption("keepIndv")) {
            String keepIndv = this.cmd.getOptionValue("keepIndv");
            String[] splitedKeptIndv = keepIndv.split(",");

            for (String keepIndvItem : splitedKeptIndv) {
                settings.addKeepIndv(keepIndvItem);

            }

        }
        if (this.cmd.hasOption("keepIndvFile")) {
            settings.loadKeepIndvFile(this.cmd.getOptionValue("keepIndvFile"));
        }
        if (this.cmd.hasOption("removeIndv")) {
            String removeIndv = this.cmd.getOptionValue("removeIndv");
            String[] splitedRemovedIndv = removeIndv.split(",");

            for (String removedIndvItem : splitedRemovedIndv) {
                settings.addRemoveIndv(removedIndvItem);
            }
        }
        if (this.cmd.hasOption("removeIndvFile")) {
            settings.loadRemoveIndvFile(this.cmd.getOptionValue("removeIndvFile"));
        }
        if (this.cmd.hasOption("minIndvMeanDp")) {
            Double minIndvMeanDp = Double.parseDouble(this.cmd.getOptionValue("minIndvMeanDp"));
            settings.setMinIndvMeanDp(minIndvMeanDp);
        }
        if (this.cmd.hasOption("maxIndvMeanDp")) {
            Double maxIndvMeanDp = Double.parseDouble(this.cmd.getOptionValue("maxIndvMeanDp"));
            settings.setMaxIndvMeanDp(maxIndvMeanDp);
        }
        if (this.cmd.hasOption("mind")) {
            Double mind = Double.parseDouble(this.cmd.getOptionValue("mind"));
            settings.setMind(mind);
        }
        if (this.cmd.hasOption("phased")) {
            settings.setPhased(true);
        }
        if (this.cmd.hasOption("maxIndv")) {
            int maxIndv = Integer.parseInt(this.cmd.getOptionValue("maxIndv"));
            settings.setMaxIndv(maxIndv);
        }

        if (this.cmd.hasOption("removeFilteredGenoAll")) {
            settings.setRemoveFilteredGenoAll(Boolean.TRUE);
        }

        if (this.cmd.hasOption("removeFilteredGeno")) {
            String removeFilteredGeno = this.cmd.getOptionValue("removeFilteredGeno");
            String[] splitedRemoveFilteredGeno = removeFilteredGeno.split(",");

            for (String removedFilterFlag : splitedRemoveFilteredGeno) {
                settings.addRemoveFilteredGeno(removedFilterFlag);
            }
        }
        if (this.cmd.hasOption("minGq")) {
            Double minGq = Double.parseDouble(this.cmd.getOptionValue("minGq"));
            settings.setMinGq(minGq);
        }
        if (this.cmd.hasOption("minDp")) {
            Double minDp = Double.parseDouble(this.cmd.getOptionValue("minDp"));
            settings.setMinDp(minDp);
        }

        if (this.cmd.hasOption("maxDp")) {
            Double maxDp = Double.parseDouble(this.cmd.getOptionValue("maxDp"));
            settings.setMaxDp(maxDp);
        }

        if (this.cmd.hasOption("count")) {
            settings.setCount(true);
        }
        if (this.cmd.hasOption("freq")) {
            settings.setFreq(true);
        }
        if (this.cmd.hasOption("depth")) {
            settings.setDepth(true);
        }

    }

}
